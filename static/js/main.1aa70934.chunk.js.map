{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","empty","sortField","setSortField","reverseField","setReverseField","visibleGoods","goods","preraredGoods","sort","good1","good2","alpha","localeCompare","length","reverse","gerPreparedGoods","className","onClick","type","cn","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAkBKA,E,0EAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,K,SAAAA,E,cAAAA,E,iBAAAA,M,KAwCE,IAAME,EAAM,WACjB,MAAkCC,mBAASH,EAASI,OAApD,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAwCH,oBAAS,GAAjD,mBAAOI,EAAP,KAAqBC,EAArB,KAEMC,EAjCR,SACEC,EADF,GAGG,IADCL,EACF,EADEA,UAAWE,EACb,EADaA,aAEPI,EAAa,YAAOD,GAsB1B,OApBIL,GACFM,EACGC,MAAK,SAACC,EAAOC,GACZ,OAAQT,GACN,KAAKL,EAASe,MACZ,OAAOF,EAAMG,cAAcF,GAE7B,KAAKd,EAASiB,OACZ,OAAOJ,EAAMI,OAASH,EAAMG,OAE9B,QACE,OAAO,MAKbV,GACFI,EAAcO,UAGTP,EAOcQ,CACnBlB,EAAiB,CAAEI,YAAWE,iBAGhC,OACE,sBAAKa,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,QAAS,kBAAMf,EAAaN,EAASe,QACrCO,KAAK,SACLF,UAAWG,IAAG,SAAU,UAAW,CACjC,WAAYlB,IAAcL,EAASe,QAJvC,iCAUA,wBACEM,QAAS,kBAAMf,EAAaN,EAASiB,SACrCK,KAAK,SACLF,UAAWG,IAAG,SAAU,aAAc,CACpC,WAAYlB,IAAcL,EAASiB,SAJvC,4BAUA,wBACEI,QAAS,kBAAOb,GAAiBD,IACjCe,KAAK,SACLF,UAAWG,IAAG,SAAU,aAAc,CACpC,YAAahB,IAJjB,sBAUEF,GAAaE,IACb,wBACEc,QAAS,WACPf,EAAaN,EAASI,OACtBI,GAAgB,IAElBc,KAAK,SACLF,UAAU,4BANZ,sBAaJ,6BACGX,EAAae,KAAI,SAAAC,GAAI,OAAI,oBAAe,UAAQ,OAAvB,SAA+BA,GAAtBA,YC/G3CC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.1aa70934.chunk.js","sourcesContent":["import 'bulma/css/bulma.css';\nimport './App.scss';\nimport { useState } from 'react';\nimport cn from 'classnames';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  empty = '',\n  alpha = 'alpha',\n  length = 'length',\n}\n\ninterface SortVer {\n  sortField: SortType,\n  reverseField: boolean,\n}\n\nfunction gerPreparedGoods(\n  goods: string[],\n  { sortField, reverseField }: SortVer,\n) {\n  const preraredGoods = [...goods];\n\n  if (sortField) {\n    preraredGoods\n      .sort((good1, good2) => {\n        switch (sortField) {\n          case SortType.alpha:\n            return good1.localeCompare(good2);\n\n          case SortType.length:\n            return good1.length - good2.length;\n\n          default:\n            return 0;\n        }\n      });\n  }\n\n  if (reverseField) {\n    preraredGoods.reverse();\n  }\n\n  return preraredGoods;\n}\n\nexport const App = () => {\n  const [sortField, setSortField] = useState(SortType.empty);\n  const [reverseField, setReverseField] = useState(false);\n\n  const visibleGoods = gerPreparedGoods(\n    goodsFromServer, { sortField, reverseField },\n  );\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          onClick={() => setSortField(SortType.alpha)}\n          type=\"button\"\n          className={cn('button', 'is-info', {\n            'is-light': sortField !== SortType.alpha,\n          })}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          onClick={() => setSortField(SortType.length)}\n          type=\"button\"\n          className={cn('button', 'is-success', {\n            'is-light': sortField !== SortType.length,\n          })}\n        >\n          Sort by length\n        </button>\n\n        <button\n          onClick={() => (setReverseField(!reverseField))}\n          type=\"button\"\n          className={cn('button', 'is-warning', {\n            'is-light': !reverseField,\n          })}\n        >\n          Reverse\n        </button>\n\n        {(sortField || reverseField) && (\n          <button\n            onClick={() => {\n              setSortField(SortType.empty);\n              setReverseField(false);\n            }}\n            type=\"button\"\n            className=\"button is-danger is-light\"\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {visibleGoods.map(good => <li key={good} data-cy=\"Good\">{good}</li>)}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}